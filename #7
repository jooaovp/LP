#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define TAM 9

int verificao(int linha, int x, int m[TAM][TAM]){
    int soma=0, i;
    for(i=x; i<x+3; i++){
        soma=soma+m[linha][i];
    }
    linha++;
    for(i=x; i<x+3; i++){
        soma=soma+m[linha][i];
    }
    linha++;
    for(i=x; i<x+3; i++){
        soma=soma+m[linha][i];
    }
    if(soma==45){
        return 0;
    }
    else{
        return 1;
    }
}
 
int main(){
    int x=1, n, i, j, k, m[TAM][TAM];
    int flag ,*vet;
    
    scanf("%d", &n);
    
    while(n--){
 
        for(i=0; i<TAM; i++){
            for(j=0; j<TAM; j++){
                scanf("%d", &m[i][j]);
            }
        }
        printf("Instancia %d\n", x);
 
        flag=0;
 
        for(i=0; i<TAM; i++){
            vet=(int*)calloc(10, sizeof(int));
            for(j=0; j<TAM; j++){
                if(vet[m[i][j]]==0){
                    vet[m[i][j]]=m[i][j];
                }
                    else{
                    flag=1;
                    i=TAM;
                    j=TAM;
                }
            }
        }
        for(i=0; i<TAM; i++){
            vet=(int*)calloc(10, sizeof(int));
            for(j=0; j<TAM; j++){
                if(vet[m[j][i]]==0){
                    vet[m[j][i]]=m[j][i];
                }
                    else{
                    flag=1;
                    i=TAM;
                    j=TAM;
                    }
            }
        }
        if(flag==1){
            puts("NAO");
        }
            else{
                flag+=verificao(0, 0, m);
                flag+=verificao(0, 3, m);
                flag+=verificao(0, 6, m);
                flag+=verificao(3, 0, m);
                flag+=verificao(3, 3, m);
                flag+=verificao(3, 6, m);
                flag+=verificao(6 ,0, m);
                flag+=verificao(6, 3, m);
                flag+=verificao(6, 6, m);
                    if(flag==0){
                        puts("SIM");
                    }
                        else{
                            puts("NAO");
                        }
            }
        puts("");
        x++;
    }
    return 0;
}
